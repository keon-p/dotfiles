[User]
  name  = Keon Park
  email = xxx@aaa.com

# includeはgit 1.7.10からしか使えないので分割はしていない。いずれしたい。
#[include]
#  path = ~/dotfiles/gitconfig/.gitconfig.local

[color]
  ui          = auto
  diff        = auto
  status      = auto
  branch      = auto
  interactive = auto
  grep        = auto

[alias]
  st  = status -s
  sh  = show
  sho = show --pretty="format:" --name-only # 편집한 파일리스트
  #cf = show --pretty="format:" --name-only # 편집한 파일리스트
  so  = remote show origin
  ft  = fetch
  up  = pull --rebase       # pull rebase
  rbm = rebase master       # master로의rebase는 빈번하게 쓰임으로alias
  ad  = add
  ci  = commit
  cam = commit -a --amend   # 직전의 commit을 수정
  co  = checkout
  cb  = checkout -b
  cm  = checkout master

  # branch관련
  br = branch
  ba = branch -a           # origin을 포함한 전 branch를 표시
  bm = branch --merged     # merge 완료된   branch를 표시
  bn = branch --no-merged  # merge 미완료된 branch를 표시
  bo = branch -r

  # log관련
  wc = whatchanged         # log에 변경된 파일도 함께 표시
  ls = log --stat          # log에 변경된 파일도 함께 표시
  lp = log -p              # diff도 함께 표시
  la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # 대략적으로 표시
  lr = log origin          # originのlog
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges

  # log를tree표시
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all   = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-al    = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  log-a     = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  logall    = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  logal     = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  loga      = log -n 25 --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  lga       = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'

  # diff관련
  df  = diff
  dif = diff
  dm  = diff master           # master와 diff
  dw  = diff --color-words    # 단어별로 색깔표시해서 diff
  dc  = diff --cached         # add된 것들과 diff
  ds  = diff --staged         # add된 것들과 diff(1.6.1移行)
  d1  = diff HEAD~            # HEAD로부터 1개 앞과 diff
  d2  = diff HEAD~~           # HEAD로부터 2개 앞과 diff
  d3  = diff HEAD~~~          # HEAD로부터 3개 앞과 diff
  d4  = diff HEAD~~~~         # HEAD로부터 4개 앞과 diff
  d5  = diff HEAD~~~~~        # HEAD로부터 5개 앞과 diff
  d10 = diff HEAD~~~~~~~~~~   # HEAD로부터 10개 앞과 diff
  # merge할 때에 conflict가 생긴 파일을 편집
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # merge할 때에 conflict가 생긴 파일을 add
  add-unmerged  = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

  # grep관련
  gr  = grep
  gn  = grep -n
  sm  = submodule
  sma = submodule add
  smi = submodule update --init
  smu = submodule foreach "git checkout master; git pull origin master"
  smupdate = submodule foreach "git checkout master; git pull origin master"
  show-graph = log --graph --abbrev-commit --pretty=oneline
